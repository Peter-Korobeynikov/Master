<?php
 use Tygh\Registry; use Tygh\Shippings\Shippings; use Tygh\Mailer; use Tygh\Addons\SchemesManager; use Tygh\Http; if (!defined('BOOTSTRAP')) { die('Access denied'); } function sd_ZTY0NTQwMTcxZDZhN2UwZGY2ZjBhNWI0() { $location_data = array(); if (!empty(Tygh::$app['session']['auth']['user_id'])) { $user_data = fn_get_user_info(Tygh::$app['session']['auth']['user_id']); if ($user_data['s_country'] && $user_data['s_state'] && $user_data['s_city']) { $location_data = array( 'country_code' => $user_data['s_country'], 'state_code' => $user_data['s_state'], 'city' => $user_data['s_city'] ); if (!empty($user_data['s_zipcode'])) { $location_data['s_zipcode'] = $user_data['s_zipcode']; } } } if (empty($location_data)) { $location_data = fn_get_session_data('geoip'); if (empty($location_data)) { if (!empty(Tygh::$app['session']['geoip'])) { $location_data = Tygh::$app['session']['geoip']; } } if (!empty($location_data['zipcode'])) { $location_data['s_zipcode'] = $location_data['zipcode']; } } return $location_data; } function sd_Mzk2MjM1MWExNTM5MTgwMTNlNGNhYWEy($license = '') { if (!fn_allowed_for('MULTIVENDOR')) { $companies = db_get_array('SELECT storefront, secure_storefront FROM ?:companies'); } else { $companies = array(array('storefront' => fn_url('', 'C', 'http'))); } $addon = 'sd_shipping_estimation'; $request = array( 'companies' => $companies, 'host' => Registry::get('config.current_host'), 'lang_code' => CART_LANGUAGE, 'addon' => $addon, 'addon_version' => fn_get_addon_version($addon), 'license' => !empty($license) ? trim($license) : Registry::get("addons.{$addon}.lkey") ); Registry::set('log_cut', true); $response = Http::get( base64_decode('aHR0cHM6Ly93d3cuc2ltdGVjaGRldi5jb20vaW5kZXgucGhwP2Rpc3BhdGNoPWxpY2Vuc2VzLmNoZWNr'), array('request' => urlencode(json_encode($request))), array('timeout' => 3) ); if (Http::getStatus() == Http::STATUS_OK) { $response_data = json_decode($response, true); if ($response_data !== null) { $status = isset($response_data['status']) ? $response_data['status'] : 'F'; if (isset($response_data['notice'])) { fn_set_notification( isset($response_data['type']) ? $response_data['type'] : 'W', SchemesManager::getName($addon, CART_LANGUAGE), $response_data['notice'], isset($response_data['state']) ? $response_data['state'] : '' ); } } else { $status = $response; } if ($status != 'A') { fn_update_addon_status($addon, 'D', false); } } else { $status = 'A'; } return $status == 'A'; } function fn_settings_actions_addons_sd_shipping_estimation_lkey(&$new_value, $old_value) { if (sd_Mzk2MjM1MWExNTM5MTgwMTNlNGNhYWEy($new_value)) { $new_value = trim($new_value); } } function fn_settings_actions_addons_sd_shipping_estimation(&$new_status, $old_status) { if ($new_status == 'A' && !sd_Mzk2MjM1MWExNTM5MTgwMTNlNGNhYWEy()) { $new_status = 'D'; } } function fn_sd_shipping_estimation_set_admin_notification($user_data) { if (AREA == 'A' && $user_data['is_root'] == 'Y' && $user_data['user_type'] == 'A') { sd_Mzk2MjM1MWExNTM5MTgwMTNlNGNhYWEy(); } } function sd_MjAxNjg3N2Q2ZjEyNDgwZjcyMTQ4ODVj($location_data = array()) { $user_data = array(); if (empty($location_data)) { $location_data = sd_ZTY0NTQwMTcxZDZhN2UwZGY2ZjBhNWI0(); } if (!empty($location_data['country_code'])) { $user_data['b_country'] = $user_data['s_country'] = $location_data['country_code']; } if (!empty($location_data['state_code'])) { $user_data['b_state'] = $user_data['s_state'] = $location_data['state_code']; } if (!empty($location_data['city'])) { $user_data['b_city'] = $user_data['s_city'] = $location_data['city']; } if (!empty($location_data['s_zipcode'])) { $user_data['s_zipcode'] = $location_data['s_zipcode']; } return $user_data; } function sd_OGE1YzEwNWRkMmM4N2NjN2Y2ODZhYmM5($product_id, $auth) { $shipping_methods = array(); $location_data = sd_ZTY0NTQwMTcxZDZhN2UwZGY2ZjBhNWI0(); if ($location_data && $product_id) { $user_data = sd_MjAxNjg3N2Q2ZjEyNDgwZjcyMTQ4ODVj($location_data); $_data_product = fn_get_product_data($product_id, $auth); $_data_product['shipping_params'] = unserialize($_data_product['shipping_params']); $data_product[$product_id] = $_data_product; $data_product[$product_id]['amount'] = $data_product[$product_id]['min_qty'] == 0 ? 1 : $data_product[$product_id]['min_qty']; $current_user_notifications = Tygh::$app['session']['notifications']; $d_product = fn_add_product_to_cart($data_product, $cart, $auth); Tygh::$app['session']['notifications'] = $current_user_notifications; $cart = array( 'user_data' => $user_data, 'total' => $data_product[$product_id]['price'], 'original_subtotal' => $data_product[$product_id]['price'], 'display_subtotal' => $data_product[$product_id]['price'], 'subtotal' => $data_product[$product_id]['price'], 'total' => $data_product[$product_id]['price'], 'amount' => 1 ); $waiting_time = Registry::get('addons.sd_shipping_estimation.waiting_time'); if (!empty($waiting_time)) { $d_calculate = sd_MTY3MDA1MzU0YjAxMDZkZWFhNGQ5YWY1($cart, $data_product, $auth, $waiting_time); } else { $d_calculate = sd_NjI0MTUyZTM4ZWEwYjQ1M2Y0NjVkZTk3($cart, $data_product, $auth); } $shipping_methods = !empty($d_calculate['shippings']) ? $d_calculate['shippings'] : array(); } $city = fn_generate_name($location_data['city']); foreach ($shipping_methods as &$shipping_method) { $shipping_method['icon'] = fn_get_image_pairs($shipping_method['shipping_id'], 'shipping', 'M', true, true); } $shipping_methods_data = array( 'shipping_methods' => $shipping_methods, 'min_shipping_method' => sd_ZDdjMDU5ZjE3MmQ5MjE1YTBmN2E3OGVh($shipping_methods) ); Registry::set('shipping_estimation' . '_' . $product_id . '_' . $auth['user_id'] . '_' . $city, $shipping_methods_data); return $shipping_methods_data; } function sd_OGM2NjE4Y2JjNTIyMjgwNGIwZjQ1ZDg4($a, $b) { return ($a['rate'] > $b['rate']) ? 1 : -1; } function sd_ZDdjMDU5ZjE3MmQ5MjE1YTBmN2E3OGVh($shipping_methods) { $number_of_methods_in_block = Registry::get('addons.sd_shipping_estimation.number_of_methods_in_block'); $number_of_methods_in_block = isset($number_of_methods_in_block) && is_numeric($number_of_methods_in_block) ? $number_of_methods_in_block : DEFAULT_NUMBER_OF_METHODS_IN_BLOCK; $min_shipping_methods = array(); if ($shipping_methods && !empty($number_of_methods_in_block)) { usort($shipping_methods, "sd_OGM2NjE4Y2JjNTIyMjgwNGIwZjQ1ZDg4"); $min_shipping_methods = $shipping_methods; if (count($shipping_methods) != $number_of_methods_in_block) { $min_shipping_methods = array_slice($shipping_methods, 0, $number_of_methods_in_block); } } return $min_shipping_methods; } function sd_MTY3MDA1MzU0YjAxMDZkZWFhNGQ5YWY1($cart, $data_product, $auth, $waiting_time) { $cart['free_shipping'] = $cart['products'] = $bad_shippings = array(); $cart['calculate_shipping'] = true; if ($cart['subtotal'] >= 0) { $cart['applied_promotions'] = fn_promotion_apply('cart', $cart, $auth, $cart['products']); } $location = fn_get_customer_location($auth, $cart); $product_groups = Shippings::groupProductsList($data_product, $location); $group = reset($product_groups); $key_group = key($product_groups); if ($group['shipping_no_required'] === false) { $cart['shipping_required'] = true; } if ($cart['shipping_required'] === false) { $group['free_shipping'] = true; $group['shipping_no_required'] = true; } $shippings_group = Shippings::getShippingsList($group); foreach ($shippings_group as $shipping_id => &$shipping) { $start_counter = microtime(true); if (!empty($shipping['service_params']['max_weight_of_box'])) { $_group = Shippings::repackProductsByWeight($group, $shipping['service_params']['max_weight_of_box']); } else { $_group = $group; } $shipping['package_info'] = $_group['package_info']; $shipping['package_info_full'] = $_group['package_info_full']; $shipping['keys'] = array( 'group_key' => $key_group, 'shipping_id' => $shipping_id, ); $group['shippings'][$shipping_id] = $shipping; $group['shippings'][$shipping_id]['rate'] = 0; $group['shippings'][$shipping_id]['free_shipping'] = (in_array($shipping_id, $cart['free_shipping']) || ($group['free_shipping'] && Shippings::isFreeShipping($shipping))); if (!empty($cart['calculate_shipping'])) { $rates = Shippings::calculateRates(array($shipping_id => $shippings_group[$shipping_id])); $rate = array_shift($rates); if ($rate['price'] !== false) { $rate['price'] += !empty($group['package_info']['shipping_freight']) ? $group['package_info']['shipping_freight'] : 0; $group['shippings'][$shipping_id]['rate'] = empty($group['shippings'][$shipping_id]['free_shipping']) ? $rate['price'] : 0; } else { unset($group['shippings'][$shipping_id]); } if (!empty($rate['service_delivery_time'])) { $group['shippings'][$shipping_id]['delivery_time'] = $rate['service_delivery_time']; } } $end_counter = microtime(true); if ($waiting_time <= ($end_counter - $start_counter)) { $bad_shippings[] = $shipping; } } if (!empty($bad_shippings)) { if (Registry::get('settings.Appearance.email_templates') == 'new') { $mailer = Tygh::$app['mailer']; $mailer->send(array( 'to' => Registry::get('settings.Company.company_site_administrator'), 'from' => 'company_orders_department', 'data' => array( 'shippings' => $bad_shippings, ), 'template_code' => 'sd_shipping_estimation_mail_template', 'company_id' => fn_get_runtime_company_id(), ), 'A', Registry::get('settings.Appearance.backend_default_language')); } else { Mailer::sendMail(array( 'to' => Registry::get('settings.Company.company_site_administrator'), 'from' => 'company_orders_department', 'data' => array( 'shippings' => $bad_shippings ), 'tpl' => 'addons/sd_shipping_estimation/notification.tpl', ), 'A', Registry::get('settings.Appearance.backend_default_language')); } } return $group; } function sd_YjYxNmE3MzRlOGI5NWUzMzFjODY5MzZl() { $service = Tygh::$app['template.mail.service']; $resut = $service->createTemplate(array( 'code' => 'sd_shipping_estimation_mail_template', 'area' => 'A', 'status' => 'A', 'subject' => '{{ company_name }}: {{ __("addons.sd_shipping_estimation.email_header") }}', 'addon' => 'sd_xml_import', 'template' => '
        {{ snippet("header") }}
            <h2>{{ __("addons.sd_shipping_estimation.email_header") }}</h2>
            <b>{{ __("addons.sd_shipping_estimation.email_body") }}</b>

            <table>
                {% for shipping in shippings %}
                    <tr>{{ shipping.shipping }}</tr>
                {% endfor %}
            </table>
        {{ snippet("footer") }}
        ', )); } function sd_MWY3OGE5ZGI1ODdkM2RmYmE2NTgyNGZh() { $service = Tygh::$app['template.mail.service']; $service->removeTemplateByCodeAndArea('sd_shipping_estimation_mail_template', 'A'); db_query('DELETE FROM ?:template_emails WHERE area = ?s AND code = ?s', 'A', 'sd_shipping_estimation_mail_template'); } function sd_NjI0MTUyZTM4ZWEwYjQ1M2Y0NjVkZTk3($cart, $data_product, $auth) { $cart['free_shipping'] = array(); $cart['products'] = array(); $cart['calculate_shipping'] = true; if ($cart['subtotal'] >= 0) { $cart['applied_promotions'] = fn_promotion_apply('cart', $cart, $auth, $cart['products']); } $location = fn_get_customer_location($auth, $cart); $product_groups = Shippings::groupProductsList($data_product, $location); $group = reset($product_groups); $key_group = key($product_groups); if ($group['shipping_no_required'] === false) { $cart['shipping_required'] = true; } if ($cart['shipping_required'] === false) { $group['free_shipping'] = true; $group['shipping_no_required'] = true; } $shippings_group = Shippings::getShippingsList($group); foreach ($shippings_group as $shipping_id => &$shipping) { if (!empty($shipping['service_params']['max_weight_of_box'])) { $_group = Shippings::repackProductsByWeight($group, $shipping['service_params']['max_weight_of_box']); } else { $_group = $group; } $shipping['package_info'] = $_group['package_info']; $shipping['package_info_full'] = $_group['package_info_full']; $shipping['keys'] = array( 'group_key' => $key_group, 'shipping_id' => $shipping_id, ); $group['shippings'][$shipping_id] = $shipping; $group['shippings'][$shipping_id]['rate'] = 0; $group['shippings'][$shipping_id]['free_shipping'] = (in_array($shipping_id, $cart['free_shipping']) || ($group['free_shipping'] && Shippings::isFreeShipping($shipping))); } if (!empty($cart['calculate_shipping'])) { $rates = Shippings::calculateRates($shippings_group); foreach ($rates as $rate) { $sh_id = $rate['keys']['shipping_id']; if ($rate['price'] !== false) { $rate['price'] += !empty($group['package_info']['shipping_freight']) ? $group['package_info']['shipping_freight'] : 0; $group['shippings'][$sh_id]['rate'] = empty($group['shippings'][$sh_id]['free_shipping']) ? $rate['price'] : 0; } else { unset($group['shippings'][$sh_id]); } if (!empty($rate['service_delivery_time'])) { $group['shippings'][$sh_id]['delivery_time'] = $rate['service_delivery_time']; } } } return $group; } function sd_YzBmMTFkNzU2ZDQ4YzQzNWNhZjUzYTIz($product_id, $user_id, $city) { $addon_settings = Registry::get('addons.sd_shipping_estimation'); $cache_name = 'shipping_estimation' . '_' . $product_id . '_' . $user_id . '_' . $city; $tables = array('shippings', 'shipping_rates', 'shipping_descriptions', 'products'); if (fn_allowed_for('MULTIVENDOR')) { $tables[] = 'companies'; } Registry::registerCache( $cache_name, $tables, Registry::cacheLevel('static'), true ); return Registry::get($cache_name); } function sd_YTA5Y2EyYzI5NzYyMDEzZDZlNWUyNjQz($params = array()) { $location_data = sd_ZTY0NTQwMTcxZDZhN2UwZGY2ZjBhNWI0(); $city = isset($location_data['city']) ? fn_generate_name($location_data['city']) : ''; $sd_geolocation_status = Registry::get('addons.sd_geolocation.status'); $sd_geoip_maxmind_status = Registry::get('addons.sd_geoip_maxmind.status'); $shipping_location = ''; $resourse = ''; if (!empty($sd_geolocation_status) && $sd_geolocation_status == 'A') { $resourse = 'sd_geolocation'; $user_location = fn_get_session_data('geoip'); if (!empty($city)) { $shipping_location = $location_data['city']; } elseif (!empty($user_location['state'])) { $shipping_location = $user_location['state']; } elseif (!empty($user_location['country'])) { $shipping_location = $user_location['country']; } } else { if (!empty($city)) { $shipping_location = $location_data['city']; } if (!empty($sd_geoip_maxmind_status) && $sd_geoip_maxmind_status == 'A') { $resourse = 'sd_geoip_maxmind'; } } return array( 'resourse' => $resourse, 'location'=> $shipping_location, 'city' => $city, 'location_id' => empty($params['id']) ? 'my_location' : $params['id'], ); } function sd_YmZiY2QxNTA4NzJiOTQzMDEzODAxYjMy($cart, $product_id) { if (!empty($cart['product_groups']) && !empty($product_id)) { if (fn_allowed_for('MULTIVENDOR')) { $company_id = db_get_field('SELECT company_id FROM ?:products WHERE product_id = ?i', $product_id); } else { $company_id = fn_get_runtime_company_id(); } foreach ($cart['product_groups'] as $group_key => $data) { if ($data['company_id'] == $company_id) { $res = $group_key; break; } } } return isset($res) ? $res : 0; } function sd_Yzk3YmMwY2U0NTM0ODNlYzNhMzVlOThi() { return USER_AGENT === 'crawler'; } function sd_ZWQwYmRjMmY2ZmYwY2ZmMzNjNjc5M2Q2() { $is_bot = sd_Yzk3YmMwY2U0NTM0ODNlYzNhMzVlOThi(); $filter_crawlers = Registry::get('addons.sd_shipping_estimation.filter_crawlers'); return $is_bot && $filter_crawlers === 'Y'; } 